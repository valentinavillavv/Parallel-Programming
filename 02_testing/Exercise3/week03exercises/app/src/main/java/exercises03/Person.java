/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package exercises03;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class Person {

    // state
    // no escaping possible, every variable is private
    private static int lastId = 0;
    private final int id; // final because impossible to modify later
    private String name;
    private int zip;
    private String address;

    public Person(int initialId) {
        synchronized (Person.class) {
            if (lastId == 0) {
                this.id = initialId;
                lastId = initialId + 1;
            } else {
                this.id = lastId;
                lastId++;
            }
        }
    }

    public Person() {
        synchronized (Person.class) {
            this.id = lastId;
            lastId++;
        }
    }

    public synchronized void setAddressAndZip(String add, int zip) {
        this.address = add;
        this.zip = zip;
    }

    public synchronized void setName(String name) {
        this.name = name;
    }

    public int getId() {
        return this.id;
    }

    public synchronized String getName() {
        return new String(this.name);
    }

    public synchronized int getZip() {
        return this.zip;
    }

    public synchronized String getAddress() {
        return new String(this.address);
    }

    public static void main(String[] args) {
        int nrThreads = 5;
        CyclicBarrier barrier = new CyclicBarrier(nrThreads + 1);

        // start threads
        for (int i = 0; i < nrThreads; i++) {
            new Thread(() -> {
                try {
                    Person man = new Person();
                    barrier.await(); // waits until all threads all ready

                    // modify person
                    man.setName("Simon Kjaer");
                    man.setAddressAndZip("Arne Jacobsens Alle", 2300);
                    System.out.println(
                            man.getId() + " " + " " + man.getName() + " " + man.getAddress() + " " + man.getZip());

                    barrier.await(); // waits until all threads are done
                } catch (InterruptedException | BrokenBarrierException e) {
                    e.printStackTrace();
                }
            }).start();
        }

        try {
            barrier.await(); // wait until threads are ready for execution (maximize contention)
            barrier.await(); // wait for threads to finish
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
}
